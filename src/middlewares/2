//require('dotenv').config();
const { config } = require('dotenv');
const jwt = require('jsonwebtoken');
const { findByIdUsuarioService } = require('../services/usuario.service');

config();

// verificação para conseguir pegar o id do usuário quando ele realizar alguma postagem e para isso ele precisa ter um token
module.exports = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader) {
    return res.status(401).send({ message: 'Por favor, informe o token! >:(' });
  }

  const parts = authHeader.split(' ');

  if (parts.length !== 2) {
    return res.status(401).status({ message: 'Token inválido! >;(' });
  }

  const [scheme, token] = parts;
  console.log(`O que está vindo na const parts: ${parts}`);

  if (!/^Bearer$/i.test(scheme)) {
    return res
      .status(401)
      .send({ message: 'O token não está formatado corretamente!' });
  }

  jwt.verify(token, process.env.SECRET, async (error, decoded) => {
    const user = findByIdUsuarioService(decoded.id);

    if (error || !user || !user.id) {
      return res.status(401).send({ message: 'Token inválido! (teste)' });
    }

    req.userId = user.id;

    return next();
  });
};

/*
----------------------------------------------------------------------------
*/

const jwt = require('jsonwebtoken');
const { config } = require('dotenv');
const { findByIdUsuarioService } = require('../services/usuario.service');

config();

module.exports = async function authentication(req, res, next) {
  const authHeader = req.headers.authorization;

  try {
    if (!authHeader) {
      return res
        .status(401)
        .send({ message: 'Por favor, informe o token! >:(' });
    }

    // const parts = authHeader.split(' ');

    /*if (parts.length !== 2) {
      return res.status(401).status({ message: 'Token inválido! >;(' });
    }*/

    // const [scheme, token] = parts;
    //console.log(`O que está vindo na const parts: ${parts}`);

    console.log(`O que está vindo dentro de authHeader é: ${authHeader}`);

    if (!/^Bearer^/i.test(authHeader)) {
      return res
        .status(401)
        .send({ message: 'O token não está formatado corretamente!' });
    }

    jwt.verify(token, process.env.SECRET, async (error, decoded) => {
      const user = findByIdUsuarioService(decoded.id);

      if (error || !user || !user.id) {
        return res.status(401).send({ message: 'Token inválido! (teste)' });
      }

      req.userId = await user.id;

      return next();
    });
  } catch (err) {
    console.log(err);
    res.status(401).send('Authetication failed, token is invalid.');
  }
};
